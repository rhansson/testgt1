{
    "contents" : "/* \n Copyright (c) 2015 Roland Hansson - Nova Spatial LLC. All rights reserved. \n*/\n\nvar L; // Leaflet\nvar L_map;\nvar L_markerLayer;\nvar G_colorScale;\nvar G_points = [];  // point features\n\nwindow.addEventListener('load', function(){\n\t//console.log(\"document load\"); \n\tif (document.createElement('canvas').getContext) {\n\t\tconsole.log(\"document ok\"); \n\t} else {\n\t\tdocument.getElementById('msg').innerHTML = \"Browser must support HTML5!\";\n\t\treturn;\t\t\n\t}\n });\n\n$(document).ready(function(){\n\tconsole.log(\"document ready\");\n\n  $('#about').load(\"footer.html\");\n  $('#copyright').load(\"copyright.html\");\n\n  // set up Mapbox\n  L.mapbox.accessToken = 'pk.eyJ1Ijoicm9sYW5kaGFuc3NvbiIsImEiOiI1eDRwVlRBIn0.po6MwM6ZOeSVXxHy6HvzWg';\n  L_map = L.mapbox.map('map', 'mapbox.light', {\n    maxZoom: 17, minZoom: 5,\n    legendControl: {\n      position: 'topright'\n    }\n  }).setView([33.690, -117.772], 10);\n  L_map.on(\"moveend\", refresh);  // Fired when the view of the map stops changing (incl zoom)\n\n  // draw study area outline\n  var promise = $.getJSON('data/oc_clip.geojson');\n  promise.then(function(data) {           \n    console.log(data.features.length +\" features\")\n    geojsonLayer = L.geoJson(data, {\n      style: function(feature) { return {\n        fill: false,\n        weight: 2,\n        color: '#FF00FF' \n      }}\n    }); \n    L_map.addLayer(geojsonLayer);\n    L.control.scale().addTo(map);\n  });\n\n  // create marker layer for themes\n  L_markerLayer = L.mapbox.featureLayer().addTo(L_map);\n      \n  G_colorScale = d3.scale.ordinal()  // Orange-Red\n    .range(colorbrewer.OrRd[9])\n    .domain([1,2,3,4,5,6,7,8,9,10]);\n\n  $(\"#refresh\").on(\"click\", function() {\n    $(\"#refresh\").attr(\"disabled\", \"disabled\"); \n    refresh(null);\n  }); \n\n  $(\"#test\").on(\"click\", function(){\n    $(\"#test\").attr(\"disabled\", \"disabled\");\n    var req = ocpu.rpc(\"test\", {\n      x : \"hello\"\n    }, function(output){\n      $(\"#output\").text(output.message);\n    });\n    req.fail(function(){\n      alert(\"Server error: \" + req.responseText);\n    });\n    req.always(function(){\n      $(\"#test\").removeAttr(\"disabled\")\n    });\n  });\n\n  $(\"#corr\").on(\"click\", function() {\n    var theme = $(\"#theme\").find('option:selected').val();         \n    var bnds = L_map.getBounds();  // NE, SW lat/lon\n    var zoom = L_map.getZoom();    \n    \n    // request features via opencpu Stateful\n    var res = null;\n    console.log(\"Call: \"+theme+\" Zoom:\"+zoom+\" \"+bnds._southWest.lng+\",\"+bnds._southWest.lat+\" \"+bnds._southWest.lng+\",\"+bnds._southWest.lat)\n    $(\"#corr\").attr(\"disabled\", \"disabled\");\n    var req1 = ocpu.call(\"testgt1\", {\n      sw : bnds._southWest,          \n      ne : bnds._northEast,\n      zoom : zoom,\n      theme: theme\n      }, function(session1) {\n        var req2 = ocpu.call(\"corXY\", {df : session1}, function(session2) {\n          session2.getObject(function(data) {\n            $(\"#output\").text(data);\n          });\n        });\n        req2.fail(function(){\n          alert(\"Server error: \" + req2.responseText);\n        });\n      });\n    req1.fail(function(){\n      alert(\"Server error: \" + req1.responseText);\n    });\n    req1.always(function(){\n      $(\"#corr\").removeAttr(\"disabled\")\n    });\n  });\n\n  // draw map\n  refresh();\n});\n\nfunction refresh(e) {\n  if (e!==null) {  // Check on null because L_map.on(\"moveend\", refresh) event sends an object\n    if (!($('#auto').is(\":checked\"))) {\n      return;\n    }    \n  }\n  var theme = $(\"#theme\").find('option:selected').val();         \n  var bnds = L_map.getBounds();  // NE, SW lat/lon\n  var zoom = L_map.getZoom();    \n  \n  // request features via opencpu stateless\n  var res = null;\n  console.log(\"RPC: \"+theme+\" Zoom:\"+zoom+\" \"+bnds._southWest.lng+\",\"+bnds._southWest.lat+\" \"+bnds._southWest.lng+\",\"+bnds._southWest.lat)\n  var req = ocpu.rpc(\"testgt1\", {\n    sw : bnds._southWest,          \n    ne : bnds._northEast,\n    zoom : zoom,\n    theme: theme\n  }, function(res) {\n    //console.log(res)\n    if (res[0]) {  // not null  \n      $(\"#output\").text(res.length+\" points\");\n      G_points = res;\n      refreshMap(G_points, L_map, L_markerLayer, theme, G_colorScale);      \n    } else {\n      $(\"#output\").text(\"0 points returned\");      \n    }    \n  });\n  req.fail(function(){\n    alert(\"Server error: \" + req.responseText);\n  });\n  req.always(function(){\n    $(\"#refresh\").removeAttr(\"disabled\")\n  });\n}\n\nfunction refreshMap(points, map, markerLayer, theme, colorScale) {\n  markerLayer.clearLayers();  // reset map\n  var arrLen = points.length;  \n  var markerOpts = {\n    radius: 7,\n    fillColor: '#6F4E37',\n    stroke: false,\n    fillOpacity: 0.7\n  }\n  // assign color\n  var val = null;\n  for (var i=0; i<arrLen; i++) {\n    p = points[i];\n    switch(theme) {                  \n      case 'colls':\n        val = p.INJURED;\n        //console.log(val)\n        markerOpts['fillColor'] = colorScale(val).toString();\n        break;                  \n    }\n    var marker = L.circleMarker([p.y, p.x], markerOpts);\n    markerLayer.addLayer(marker);                       \n  }                              \n  map.invalidateSize();  // force redraw\n}\n\n",
    "created" : 1453059501517.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3334416895",
    "id" : "4712ACCC",
    "lastKnownWriteTime" : 1453059752,
    "path" : "C:/Users/roland/Rolles/Nova_Spatial/GeoTuple/testgt1/inst/www/scripts/testgt1.js",
    "project_path" : "inst/www/scripts/testgt1.js",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "js"
}